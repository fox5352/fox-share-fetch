{"version":3,"file":"main.js","sources":["../src/utils.ts","../src/requests.ts","../src/model.ts"],"sourcesContent":["import crypto from \"crypto\"\n\nconst NONCE_SIZE = 12;  // 96-bit nonce (same as Rust)\nconst TAG_SIZE = 16;    // 128-bit GCM tag\n\n/**\n * Encrypts plaintext using AES-256-GCM with a random 96-bit nonce.\n *\n * @param {Buffer} key - 32-byte key.\n * @param {string} plaintext - UTF-8 string to encrypt.\n * @returns {string} Base64(nonce || ciphertext || tag)\n */\nexport function encrypt(key: string, plaintext: string): string {\n\tif (!key || key.length !== 32) {\n\t\tthrow new Error(\"Key must be 32 bytes for AES-256\");\n\t}\n\n\t// Generate random nonce\n\tconst nonce = crypto.randomBytes(NONCE_SIZE);\n\n\tconst cipher = crypto.createCipheriv(\"aes-256-gcm\", key, nonce);\n\tconst ciphertext = Buffer.concat([\n\t\tcipher.update(plaintext, \"utf8\"),\n\t\tcipher.final(),\n\t]);\n\n\tconst tag = cipher.getAuthTag();\n\n\t// Combine nonce + ciphertext + tag\n\tconst combined = Buffer.concat([nonce, ciphertext, tag]);\n\n\treturn combined.toString(\"base64\");\n}\n\n/**\n * Decrypts data previously encrypted with encrypt().\n *\n * @param {Buffer} key - 32-byte key.\n * @param {string} encryptedB64 - Base64(nonce || ciphertext || tag).\n * @returns {string} UTF-8 plaintext.\n */\nexport function decrypt(key: string, encryptedB64: string): string {\n\tif (!key || key.length !== 32) {\n\t\tthrow new Error(\"Key must be 32 bytes for AES-256\");\n\t}\n\n\tconst combined = Buffer.from(encryptedB64, \"base64\");\n\tif (combined.length < NONCE_SIZE + TAG_SIZE) {\n\t\tthrow new Error(\"Encrypted data too short\");\n\t}\n\n\tconst nonce = combined.slice(0, NONCE_SIZE);\n\tconst tag = combined.slice(combined.length - TAG_SIZE);\n\tconst ciphertext = combined.slice(NONCE_SIZE, combined.length - TAG_SIZE);\n\n\tconst decipher = crypto.createDecipheriv(\"aes-256-gcm\", key, nonce);\n\tdecipher.setAuthTag(tag);\n\n\tconst decrypted = Buffer.concat([decipher.update(ciphertext), decipher.final()]);\n\treturn decrypted.toString(\"utf8\");\n}\n\n// Encode raw binary data (ArrayBuffer or Uint8Array) to Base64 string\nexport function encodeToBase64(data: ArrayBuffer | Uint8Array): string {\n\tconst buffer = data instanceof ArrayBuffer ? new Uint8Array(data) : data;\n\tlet binary = '';\n\tbuffer.forEach(byte => binary += String.fromCharCode(byte));\n\treturn btoa(binary);\n}\n\n// Decode Base64 string to a Uint8Array (raw binary buffer)\nexport function base64ToBuffer(base64: string): Uint8Array {\n\tconst binary = atob(base64);\n\tconst buffer = new Uint8Array(binary.length);\n\tfor (let i = 0; i < binary.length; i++) {\n\t\tbuffer[i] = binary.charCodeAt(i);\n\t}\n\treturn buffer;\n}\n","import { decrypt } from \"./utils\";\nimport { Allowed, Res, Settings } from \"./types\"\n\nexport type Methods = \"GET\" | \"POST\" | \"UPDATE\" | \"DELETE\";\n\nexport type RouteData = {\n\tpath: string,\n\tname: string,\n\tdescription: string,\n\tmethods: Methods[]\n}\n\nexport type Routes = {\n\troutes: RouteData[]\n}\n\nexport async function reqwest<T>(\n\turl: string,\n\toptions: RequestInit = {},\n\tkey?: string | null\n): Promise<Res<T>> {\n\t// Build default headers\n\tconst defaultHeaders = new Headers({\n\t\t\"Content-Type\": key ? \"text/plain\" : \"application/json\"\n\t});\n\n\t// Merge user-provided headers properly\n\tif (options.headers) {\n\t\tconst customHeaders = new Headers(options.headers);\n\t\tcustomHeaders.forEach((value, name) => {\n\t\t\tdefaultHeaders.set(name, value);\n\t\t});\n\t}\n\n\tconst res = await fetch(url, {\n\t\t...options,\n\t\theaders: defaultHeaders\n\t});\n\n\t// Throw error on non-2xx responses\n\tif (!res.ok) {\n\t\tconst text = await res.text();\n\t\tthrow new Error(`HTTP ${res.status}: ${text}`);\n\t}\n\n\t// Return raw text when encryption key is provided\n\tif (key) {\n\t\tconst encryptedBuffer = await res.text();\n\n\t\tconst decryptedBuffer = decrypt(key, encryptedBuffer);\n\t\tconst data = JSON.parse(decryptedBuffer);\n\n\t\treturn data\n\t}\n\n\t// Otherwise, return parsed JSON\n\treturn await res.json();\n}\n\nexport async function heathCheck(url: string, key: string | null = null): Promise<boolean> {\n\tconst res = await reqwest<Routes>(`${url}/`, {\n\t\tmethod: \"GET\"\n\t}, key);\n\n\n\tif (res.data != null) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\nexport async function getindex(url: string, key: string | null = null): Promise<Routes | null> {\n\ttry {\n\t\tconst res = await reqwest<Routes>(`${url}/`, {\n\t\t\tmethod: \"GET\",\n\t\t}, key)\n\n\t\tconst { data } = res;\n\n\t\treturn data;\n\t} catch (error) {\n\t\tconsole.error(\"Failed to get index of server\");\n\t\treturn null\n\t}\n}\n\n\nexport async function getSettings(url: string, key: string | null = null): Promise<Settings | null> {\n\ttry {\n\t\tconst res = await reqwest<Settings>(`${url}/settings`, {\n\t\t\tmethod: \"GET\"\n\t\t}, key);\n\n\t\tconst { data } = res;\n\n\t\treturn data;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\treturn null;\n\t}\n}\n\n\nexport async function getAllowedList(url: string, key: string | null = null): Promise<Allowed | null> {\n\ttry {\n\t\tconst res = await reqwest<Allowed>(`${url}/allowed`, { method: \"GET\" }, key);\n\n\t\tconst { data } = res;\n\n\n\t\treturn data;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\treturn null;\n\t}\n}\n\n\n// /filetype/{audio|doc|image}\n","import { heathCheck, Routes, getindex } from \"./requests\";\n\nexport class FoxFetch {\n\tprivate url: string;\n\tprivate key: string | null;\n\n\tconstructor(url: string, key: string | null = null) {\n\t\tif (url.trim() == \"\") {\n\t\t\tthrow new Error(\"Url no filled\");\n\t\t}\n\t\tthis.url = url;\n\t\tthis.key = key;\n\t}\n\n\tpublic async heathCheck(): Promise<boolean> {\n\t\treturn await heathCheck(this.url, this.key)\n\t}\n\n\tpublic async getIndext(): Promise<Routes | null> {\n\t\treturn await getindex(this.url, this.key)\n\t}\n}\n\nlet FoxState: FoxFetch | null = null;\n\nexport default function createFoxFetchStore(url: string, key: string | null = null) {\n\tif (!FoxState) FoxState = new FoxFetch(url, key);\n\n\treturn FoxState;\n}\n"],"names":[],"mappings":"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"}